<?php

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field_encrypt_searchable\FieldEncryptSearchableProcessEntitiesInterface;

/**
 * Implements hook_entity_insert().
 */
function field_encrypt_searchable_entity_insert(Drupal\Core\Entity\EntityInterface $entity)
{
  if ($entity instanceof ContentEntityInterface) {
    /** @var FieldEncryptSearchableProcessEntitiesInterface $feProcessService */
    $feProcessService = Drupal::service('field_encrypt_searchable.process_entities');
    $feProcessService->processBlindIndex($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function field_encrypt_searchable_entity_update(Drupal\Core\Entity\EntityInterface $entity)
{
  if ($entity instanceof ContentEntityInterface) {
    /** @var FieldEncryptSearchableProcessEntitiesInterface $feProcessService */
    $feProcessService = Drupal::service('field_encrypt_searchable.process_entities');
    $feProcessService->processBlindIndex($entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function field_encrypt_searchable_entity_delete(Drupal\Core\Entity\EntityInterface $entity)
{
  if ($entity instanceof ContentEntityInterface) {
    /** @var FieldEncryptSearchableProcessEntitiesInterface $feProcessService */
    $feProcessService = Drupal::service('field_encrypt_searchable.process_entities');
    $feProcessService->deleteBlindIndex($entity);
  }
}

/**
 * Implements hook_form_alter().
 */
function field_encrypt_searchable_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  if (in_array($form_id, ['field_storage_add_form', 'field_storage_config_edit_form'])) {
    // Check permissions.
    $user = \Drupal::currentUser();
    if ($user->hasPermission('administer field encryption')) {
      /* @var $field \Drupal\field\Entity\FieldStorageConfig */
      $field = $form_state->getFormObject()->getEntity();

      $form['field_encrypt']['field_encrypt']['blind_index'] = [
        '#type' => 'checkbox',
        '#title' => t('Blind index'),
        '#description' => t('Blind index the field for searching.'),
        '#default_value' => $field->getThirdPartySetting('field_encrypt', 'blind_index', false),
        '#states' => [
          'visible' => [
            ':input[name="field_encrypt[encrypt]"]' => array('checked' => TRUE),
          ],
        ],
      ];

      // We add functions to process the form when it is saved.
      $form['#entity_builders'][] = 'field_encrypt_searchable_form_field_add_form_builder';
    }
  }
}

/**
 * Update the field storage configuration to set the encryption state.
 *
 * @param string $entity_type
 *   The entity type.
 * @param \Drupal\field\Entity\FieldStorageConfig $field_storage_config
 *   The field storage config entity.
 * @param array $form
 *   The complete form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function field_encrypt_searchable_form_field_add_form_builder($entity_type, \Drupal\field\Entity\FieldStorageConfig $field_storage_config, &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $field_encryption_settings = $form_state->getValue('field_encrypt');
  $field_encryption_settings['encrypt'] = (bool) $field_encryption_settings['encrypt'];

  // If the form has the value, we set it.
  if ($field_encryption_settings['encrypt']) {
    foreach ($field_encryption_settings as $settings_key => $settings_value) {
      $field_storage_config->setThirdPartySetting('field_encrypt', $settings_key, $settings_value);
    }
  }
  else {
    // If there is no value, remove third party settings.
    $field_storage_config->unsetThirdPartySetting('field_encrypt', 'encrypt');
    $field_storage_config->unsetThirdPartySetting('field_encrypt', 'properties');
    $field_storage_config->unsetThirdPartySetting('field_encrypt', 'encryption_profile');
    $field_storage_config->unsetThirdPartySetting('field_encrypt', 'uncacheable');
    $field_storage_config->unsetThirdPartySetting('field_encrypt', 'blind_index');
  }
}
